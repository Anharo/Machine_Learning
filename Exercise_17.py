# -*- coding: utf-8 -*-
"""Exercise 17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JS_rU0jpaYPmzqbC-d81Nq0BaDb80j2K
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.decomposition import PCA
from scipy import stats

df = pd.read_csv('heart.csv')
df.head()

df.describe()

df[df.Cholesterol>(df.Cholesterol.mean()+3*df.Cholesterol.std())]

df1 = df[df.Cholesterol<=(df.Cholesterol.mean()+3*df.Cholesterol.std())]
df1.shape

df[df.MaxHR>(df.MaxHR.mean()+3*df.MaxHR.std())]

df[df.FastingBS>(df.FastingBS.mean()+3*df.FastingBS.std())]

df[df.Oldpeak>(df.Oldpeak.mean()+3*df.Oldpeak.std())]

df2 = df1[df1.Oldpeak<=(df1.Oldpeak.mean()+3*df1.Oldpeak.std())]
df2.shape

df[df.RestingBP>(df.RestingBP.mean()+3*df.RestingBP.std())]

df3 = df2[df2.RestingBP<=(df2.RestingBP.mean()+3*df2.RestingBP.std())]
df3.shape

df.ChestPainType.unique()

df.RestingECG.unique()

df.ExerciseAngina.unique()

df.ST_Slope.unique()

df4 = df3.copy()
le = LabelEncoder()
df4['Sex'] = le.fit_transform(df4['Sex'])
df4['ChestPainType']=le.fit_transform(df4['ChestPainType'])
df4['RestingECG']=le.fit_transform(df4['RestingECG'])
df4['ExerciseAngina']=le.fit_transform(df4['ExerciseAngina'])
df4['ST_Slope']=le.fit_transform(df4['ST_Slope'])

df4.head()

df5 = pd.get_dummies(df4, columns=['ChestPainType'])
df5.head()

dd = df5.HeartDisease
dd

df5.drop(['Sex','HeartDisease'], axis=1, inplace=True)
df5.head()

sts = StandardScaler()
df6 = sts.fit_transform(df5)
df6

x_train, x_test, y_train, y_test = train_test_split(df6, dd, test_size=0.2)

"""Without PCA"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train, y_train)
model.score(x_test, y_test)

"""Using PCA

"""

pca = PCA(0.9)
x= pca.fit_transform(df6)
x.shape

pca.n_components_

X_train_pca, X_test_pca, y_train, y_test = train_test_split(x, dd, test_size=0.2, random_state=30)

model = LogisticRegression(max_iter=1000)
model.fit(X_train_pca, y_train)
model.score(X_test_pca, y_test)