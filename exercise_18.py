# -*- coding: utf-8 -*-
"""Exercise 18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14KTbFASoXCnn2zH8tZfRZsXV9xMKkcAI
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.ensemble import BaggingClassifier

df = pd.read_csv('heart.csv')

df.head()

df.describe()

df[df.Cholesterol>(df.Cholesterol.mean()+3*df.Cholesterol.std())]
df.shape

df1 = df[df.Cholesterol<=(df.Cholesterol.mean()+3*df.Cholesterol.std())]
df1.shape

df[df.MaxHR>(df.MaxHR.mean()+3*df.MaxHR.std())]

df[df.FastingBS>(df.FastingBS.mean()+3*df.FastingBS.std())]

df[df.Oldpeak>(df.Oldpeak.mean()+3*df.Oldpeak.std())]

df2 = df1[df1.Oldpeak<=(df1.Oldpeak.mean()+3*df1.Oldpeak.std())]
df2.shape

df[df.RestingBP>(df.RestingBP.mean()+3*df.RestingBP.std())]

df3 = df2[df2.RestingBP<=(df2.RestingBP.mean()+3*df2.RestingBP.std())]
df3.shape

df3.head()

from sklearn.preprocessing import mLabelEncoder
le = LabelEncoder()

df3['Sex']= le.fit_transform(df3['Sex'])
df3['ChestPainType']=le.fit_transform(df3['ChestPainType'])
df3['RestingECG']=le.fit_transform(df3['RestingECG'])
df3['ExerciseAngina']=le.fit_transform(df3['ExerciseAngina'])
df3['ST_Slope']=le.fit_transform(df3['ST_Slope'])

df4 = df3.copy()
df4.head()

df5 = pd.get_dummies(df4, columns=['Sex','ChestPainType'])
df5.head()

X = df5.drop("HeartDisease",axis='columns')
y = df5.HeartDisease
X.head()

sc = StandardScaler()
X_scaled = sc.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)
X_scaled_df.head()

x_train, x_test, y_train, y_test = train_test_split(X_scaled_df,y,test_size=0.2,random_state=5)

from sklearn.model_selection import cross_val_score
cvs= cross_val_score(DecisionTreeClassifier(), X, y, cv=5)
cvs.mean()

cvs = cross_val_score(BaggingClassifier(base_estimator=dtc, n_estimators=100, random_state=0), X, y, cv=5)
cvs.mean()

from sklearn.model_selection import cross_val_score
svc = SVC()
scores = cross_val_score(SVC(), X, y, cv=5)
scores.mean()

scores = cross_val_score(BaggingClassifier(base_estimator=svc, n_estimators=100, random_state=0), X, y, cv=5)
scores.mean()